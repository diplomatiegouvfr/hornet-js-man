title Rendu d'une page côté client

participant Client as client
participant Routeur (client) as routeur_client
participant Actions (client) as action_client
participant Dispatcheur (client) as dispatcheur_client
participant Store (client) as store_client
participant Vue (client) as vue_client
participant API externe as api


note right of routeur_client: Désérialisation des stores

loop pour chaque store
routeur_client->store_client: <<données internes>>
store_client->routeur_client: <<ok>>
end

client->+routeur_client: Appel sur '/messages'
opt si ce n'est pas le premier appel du routeur (évite une double exécution serveur puis client)


routeur_client->action_client: <<execution>>

activate action_client

loop pour chaque action à exécuter
action_client->api: <<appel>>
api->action_client: <<retour données>>

action_client->dispatcheur_client: <<dispatch>>

loop pour chaque store à l'écoute de l'action
dispatcheur_client->store_client: <<handle>>

store_client->store_client: Stockage interne

store_client->store_client: <<trigger onModification>>

loop pour chaque vue recevant l'évenement des stores
note left of vue_client: asynchrone
activate vue_client
vue_client->store_client: <<get données>>
store_client->vue_client: <<retourne données>>
vue_client->vue_client: Rendu composant
deactivate vue_client
end

store_client->dispatcheur_client: <<ok>>
dispatcheur_client->action_client: <<fin dispatch>>

end
action_client->routeur_client: <<fin action>>
deactivate action_client



end

end
